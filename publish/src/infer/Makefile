#
# Makefile for tflite/vino/mvi : Tensor Flow Lite / Intel OpneVINO / IBM MVI OpenCV Object Classification
#

# Check all necessary environment variables
-include ../../env.check.mk

export ARCH ?= $(shell uname -m)
export DOCKER_IMAGE_BASE_TFLITE = "${DOCKER_BASE}/${EDGE_OWNER}.${EDGE_DEPLOY}.tflite"
export DOCKER_IMAGE_BASE_PTH_CPU = "${DOCKER_BASE}/${EDGE_OWNER}.${EDGE_DEPLOY}.pth"
export SERVICE_VERSION_TFLITE = 0.0.1
export SERVICE_VERSION_PTH_CPU = 0.0.1

# Import variables from hzn.json (file is generated by last target in this file)
-include .hzn.json.tmp.mk

all: tflite-build tflite-push

tflite: tflite-build tflite-push tflite-publish-service tflite-deploy-policy

pth-cpu: pth-cpu-build pth-cpu-push pth-cpu-publish-service pth-cpu-deploy-policy

pth-nano: pth-nano-build pth-nano-push pth-nano-publish-service pth-nano-deploy-policy

pth-nx: pth-nx-build pth-nx-push pth-nx-publish-service pth-nx-deploy-policy

model-mvi: model-mvi-publish-service 

mi-mvi: mi-mvi-build mi-mvi-push mi-mvi-publish-service mi-mvi-deploy-policy model-mvi-p100-publish-pattern

model-mvi-p100: model-mvi-p100-publish-service

mi-mvi-p100: mi-mvi-p100-publish-service mi-mvi-p100-deploy-policy

vino: vino-build vino-push vino-publish-service vino-deploy-policy

# Build the docker container
check-tflite-dockerfile:
	envsubst < ./Dockerfile.tflite.$(ARCH)
tflite-build:
	 envsubst < ./Dockerfile.tflite.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_TFLITE)_$(ARCH):$(SERVICE_VERSION_TFLITE) . -f -

pth-cpu-build:
	 envsubst < ./Dockerfile.pth.cpu.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_PTH_CPU)_$(ARCH):$(SERVICE_VERSION_PTH_CPU) . -f -

pth-nano-build:
	 envsubst < ./Dockerfile.pth.nano.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_PTH_NANO)_$(ARCH):$(SERVICE_VERSION_PTH_NANO) . -f -

pth-nx-build:
	 envsubst < ./Dockerfile.pth.nx.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_PTH_NX)_$(ARCH):$(SERVICE_VERSION_PTH_NX) . -f -

vino-build:
	 envsubst < ./Dockerfile.vino.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_VINO)_$(ARCH):$(SERVICE_VERSION_VINO) . -f -

mi-mvi-build:
	 envsubst < ./Dockerfile.mvi.$(ARCH) | docker build -t $(DOCKER_IMAGE_BASE_MI_MVI)_$(ARCH):$(SERVICE_VERSION_MI_MVI) . -f -

# Push the docker container to the DockerHub registry
tflite-push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY_RW) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE_TFLITE)_$(ARCH):$(SERVICE_VERSION_TFLITE)

pth-cpu-push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY_RW) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE_PTH_CPU)_$(ARCH):$(SERVICE_VERSION_PTH_CPU)

pth-nano-push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE_PTH_NANO)_$(ARCH):$(SERVICE_VERSION_PTH_NANO)

pth-nx-push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE_PTH_NX)_$(ARCH):$(SERVICE_VERSION_PTH_NX)

vino-push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE_VINO)_$(ARCH):$(SERVICE_VERSION_VINO)

mi-mvi-push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE_MI_MVI)_$(ARCH):$(SERVICE_VERSION_MI_MVI)

# Publish a Horizon service (per service.json) and pull image to get its sha256
tflite-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_TFLITE).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

pth-cpu-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_PTH_CPU).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

pth-nano-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_PTH_NANO).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

pth-nx-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_PTH_NX).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

vino-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_VINO).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

model-mvi-publish-service:
	docker login -u iamapikey -p $(APP_CR_API_KEY_RO_PULL) $(CR_IBM_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_MODEL_MVI).service.definition.json --pull-image -r "$(CR_IBM_HOST):$(CR_IBM_USERNAME):$(APP_CR_API_KEY_RO_PULL)" 

model-mvi-p100-publish-service:
	docker login -u iamapikey -p $(APP_CR_API_KEY_RO_PULL) $(CR_IBM_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_MODEL_MVI_P100).service.definition.json --pull-image -r "$(CR_IBM_HOST):$(CR_IBM_USERNAME):$(APP_CR_API_KEY_RO_PULL)" 

mi-mvi-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_MI_MVI).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

mi-mvi-p100-publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/$(IMAGE_NAME_MI_MVI_P100).service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

# pattern publish
model-mvi-p100-publish-pattern:
	hzn exchange pattern publish -f horizon/$(IMAGE_NAME_MODEL_MVI_P100).pattern.json

# Deployment policy
tflite-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_TFLITE).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_TFLITE)_$(ARCH)

pth-cpu-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_PTH_CPU).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_PTH_CPU)_$(ARCH)

pth-nano-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_PTH_NANO).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_PTH_NANO)_$(ARCH)

pth-nx-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_PTH_NX).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_PTH_NX)_$(ARCH)

vino-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_VINO).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_VINO)_$(ARCH)

mi-mvi-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_MI_MVI).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_MI_MVI)_$(ARCH)

mi-mvi-p100-deploy-policy:
	hzn exchange deployment addpolicy -f horizon/$(IMAGE_NAME_MI_MVI_P100).deploy.policy.json deploy-$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME_MI_MVI_P100)_$(ARCH)

#-------------------------------
test-docker-run-tflite:
	docker run -it --device=/dev/video0:/dev/video0 --env-file ENV_FILE $(DOCKER_IMAGE_BASE_TFLITE)_$(ARCH):$(SERVICE_VERSION_TFLITE) /bin/bash

test-docker-run-vino:
	docker run -it --device=/dev/video0:/dev/video0 --env-file ENV_FILE --privileged -v /dev:/dev --network=host --mount type=bind,source=/tmp,target=/test $(DOCKER_IMAGE_BASE_VINO)_$(ARCH):$(SERVICE_VERSION_VINO) /bin/bash 

test-docker-run-mvi:
	docker run -it --device=/dev/video0:/dev/video0 --env-file ENV_FILE --privileged -v /tmp:/tmp $(DOCKER_IMAGE_BASE_MVI)_$(ARCH):$(SERVICE_VERSION_MVI) /bin/bash

# Remove the local container image
clean:
	rm -f .hzn.json.tmp.mk

# This imports the variables from hzn.json
.hzn.json.tmp.mk: horizon/hzn.json
	@ hzn util configconv -f $< > $@

