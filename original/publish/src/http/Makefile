#
# Makefile : http : A flask based local http server for REST calls
# ----------------------------------------------------------------------------

# Check all necessary environment variables
-include ../../env.check.mk

export ARCH ?= $(shell uname -m)
export DOCKER_IMAGE_BASE = ${CR_DOCKER_HOST}/${DOCKER_BASE}/${EDGE_OWNER}.${EDGE_DEPLOY}.http
export SERVICE_VERSION = 0.0.1

# Import variables from hzn.json (file is generated by last target in this file)
-include .hzn.json.tmp.mk

all: build push publish-service

# Build the docker container
build:
	docker build -t $(DOCKER_IMAGE_BASE)_$(ARCH):$(SERVICE_VERSION) -f ./Dockerfile.$(ARCH) .

# Push the docker container to the DockerHub registry
push:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY_RW) $(CR_DOCKER_HOST)
	docker push $(DOCKER_IMAGE_BASE)_$(ARCH):$(SERVICE_VERSION)

# Publish a Horizon service (per service.json) and pull image to get its sha256
publish-service:
	docker login -u $(CR_DOCKER_USERNAME) -p $(CR_DOCKER_APIKEY) $(CR_DOCKER_HOST)
	hzn exchange service publish -O -f horizon/service.definition.json --pull-image -r "$(CR_DOCKER_HOST):$(CR_DOCKER_USERNAME):$(CR_DOCKER_APIKEY)" 

# Not applicable
#deploy-policy:
#	hzn exchange deployment addpolicy -f horizon/deploy_policy_$(IMAGE_NAME).json deploy_$(EDGE_OWNER).$(EDGE_DEPLOY).$(IMAGE_NAME)_$(ARCH)

# Remove the local container image
clean:
	@docker rmi $(DOCKER_IMAGE_BASE)_$(ARCH):$(SERVICE_VERSION) 2>/dev/null || :
	@rm -f .hzn.json.tmp.mk

# This imports the variables from hzn.json
.hzn.json.tmp.mk: horizon/hzn.json
	@ hzn util configconv -f $< > $@

